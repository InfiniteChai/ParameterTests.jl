var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Let's now walk through an example to get started with your first parameter tests","category":"page"},{"location":"getting_started/#Encoding-Example","page":"Getting Started","title":"Encoding Example","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Let's suppose we're writing a run length encoding algorithm and we want to test it out.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Our first attempt is going to take the Rosetta Code implementation","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using IterTools: groupby\nencode(str::String) = collect((length(g), first(g)) for g in groupby(first, str))\ndecode(cod::Vector) = join(repeat(\"$l\", n) for (n, l) in cod)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We now want to start writing some tests for this that will check the invariance of these functions. The invariant we normally associate with these algorithms is that if you decode what you encoded, you get back the same value.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Let's give that a go with sample testing on strings","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Test\nusing ParameterTests\n\n@paramtest \"Decode Inverts Encode\" begin\n  @given s ∈ strings(:alphanum; maxsize=10)\n  @test decode(encode(s)) == s\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This test is calling a search strategy for alphanumeric strings (up to 10 characters in length by default). If we run this, we'll see that we've now sampled from 100 strings and all pass.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Test Summary:         | Pass  Total\nDecode Inverts Encode |  100    100","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"So let's introduce a bug to our decode method.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"decode(cod::Vector) = join(repeat(\"$l\", n+1) for (n, l) in cod)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Then let's rerun our tests. We now see that only 13 of the 100 samples are actually passing, which is for those with an empty string.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"For the failed samples, we also print out details on the parameters and the test that failed. We see that our string of qNu is an example failure, since we're decoding this back to qqNNuu!","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Decode Inverts Encode: [s=qNu]\nTest Failed at none:5\n  Expression: decode(encode(s)) == s\n   Evaluated: \"qqNNuu\" == \"qNu\"\nTest Summary:         | Pass  Fail  Total\nDecode Inverts Encode |   13    87    100\nERROR: Some tests did not pass: 13 passed, 87 failed, 0 errored, 0 broke","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that your results may differ since we are randomly sampling, based on the seed set by Test.","category":"page"},{"location":"getting_started/#Sampling-Multiple-Variables","page":"Getting Started","title":"Sampling Multiple Variables","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We do not restrict to a single sample set. You can join these together as required, so to sample two independent integers we can run the following","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"@paramtest \"Multiple Variables\" begin\n  @given a ∈ integers(), b ∈ integers()\n  @test a + b == b + a\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This is equivalent to writing them on two separate lines as follows.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"@paramtest \"Multiple Variables\" begin\n  @given a ∈ integers()\n  @given b ∈ integers()\n  @test a + b == b + a\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"While it is also possible to put the @given statements anywhere within the block (due to how we define them) we recommend NOT doing the following and defining them at the top of your test set.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"@paramtest \"Multiple Variables\" begin\n  @test a + b == b + a\n  @given a ∈ integers()\n  @given b ∈ integers()\nend","category":"page"},{"location":"getting_started/#Parameter-Settings","page":"Getting Started","title":"Parameter Settings","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Depending on what your testing, it can be useful to control the settings of parameter. These are exposed via the ParamTestSettings structure and can be set in the @paramtest macro. For example, to set the number of random samples to 500 we can just do this","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"@paramtest \"Samples\" samples=500 begin\n    @given a ∈ integers(), b ∈ integers()  \n    @test a + b == b + a\nend","category":"page"},{"location":"getting_started/#Parameter-Testing","page":"Getting Started","title":"Parameter Testing","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"While the sampling functions are very useful, this package also provides basic parameter testing. That means that you can run the same test over different parameters and report the results. This works in a similar fashion to sampling, except its restricted to the parameters you define.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"As an example, let's test our encode example on a few different explicit cases","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"@paramtest \"Decode Inverts Encode\" begin\n  @given s ∈ [\"\",\"\\n\",\"a\\na\"]\n  @test decode(encode(s)) == s\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We just use iterators for our test cases, so we can also combine our specific examples with a sampling set as well!","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"@paramtest \"Decode Inverts Encode\" begin\n  @given s ∈ Iterators.flatten(([\"\", \"\\n\", \"a\\nb\"], strings(:alphanum; maxsize=10)))\n  @test decode(encode(s)) == s\nend","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Provides support parameter and sample tests in Julia","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This package aims to extend the standard testing components in Julia to support parameter and sample testing and to cleanly integrate into the standard test outputs.","category":"page"},{"location":"#Package-Features","page":"Introduction","title":"Package Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A simple macro extension of @testset to support parameterised testing\nIntegration into the test output so identify failed parameters\nSupport for parameter strategies, to allow support for randomised sample testing","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ParameterTests can be installed via the Julia package manager. From the Julia REPL type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> add ParameterTests","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Similarly to Test you will generally only want to have this as part of the testing packages so it's worth editing your Project.toml to move the dependency to only be in extras","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[extras]\nTest = \"8dfed614-e22c-5e08-85e1-65c5234f0b40\"\nParameterTests = \"8eb61621-d5fd-4192-a1eb-e9414570b645\"\n\n[targets]\ntest = [\"Test\", \"ParameterTests\"]","category":"page"}]
}
